<!-- dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>NFC ATTENDANCE</title>
  <link rel="stylesheet" href="css/styles.css" />
  <!-- Font Awesome Cdn Link -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"/>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  <style>
    /* Additional CSS can go here */
   
  </style>
  <script src="/socket.io/socket.io.js"></script> <!-- Include socket.io client -->
</head>
<body>

   <!-- Notification element -->
    <!-- Floating notification element -->
  <div id="notification" class="notification">
    <span id="notification-message"></span>
    <button class="close-btn" onclick="closeNotification()">&times;</button>
  </div>
  <div class="container">
    <nav>
      <ul>
        <li><a href="#" class="logo">
          <img src="images/nfc-icon-31.png">
          <span class="nav-item">NFCAMS</span>
        </a></li>
        <li><a href="#" id="dashboard-link" class="nav-itemm">
          <i class="fas fa-menorah"></i>
          <span class="nav-item">Dashboard</span>
        </a></li>
        <li><a href="#" id="attendance-link" class="nav-itemm">
          <i class="fas fa-chart-bar"></i>
          <span class="nav-item">View Attendance</span>
        </a></li>
        <li><a href="#" id="attendance-percentage-link" class="nav-itemm">
          <i class="fas fa-percentage"></i>
          <span class="nav-item">Attendance %</span>
        </a></li>
        <li><a href="#" id="message-link" class="nav-itemm">
          <i class="fas fa-envelope"></i>
          <span class="nav-item">Messages</span>
        </a></li>
        <!-- New Announcements tab -->
  <li><a href="#" id="announcements-link" class="nav-itemm">
    <i class="fas fa-bullhorn"></i>
    <span class="nav-item">Announcements</span>
  </a></li>
        <!-- <li><a href="#" id="report-link" class="nav-itemm"> -->
          <!-- <i class="fas fa-file-alt"></i> -->
          <!-- <span class="nav-item">Report</span> -->
        <!-- </a></li> -->

        
        
        <li><a href="#" id="students-link" class="nav-itemm">
          <i class="fas fa-users"></i>
          <span class="nav-item">Total Students</span>
        </a></li>
        
        
<li><a href="#" id="profile-link" class="nav-itemm">
  <i class="fas fa-user"></i>
  <span class="nav-item">Profile</span>
</a></li>

        <li><a href="#" class="logout" onclick="logout()" id="logout-link" class="nav-itemm">
          <i onclick="logout()" class="fas fa-sign-out-alt"></i>
          <span onclick="logout()" class="nav-item">Log out</span>
        </a></li>
      </ul>
    </nav>


    <section class="main">
      <div class="main-top">
        <h1>Welcome to NFCAMS Teacher Dashboard</h1>
        <i class="fas fa-user-circle" id="profile-icon"></i> <!-- Updated icon -->
      </div>

      <div id="welcome" class="tabcontent">
       
        <!-- Welcome content with button for taking attendance -->
        <div class="welcome-message" style="display: block;">
            <h3 style="color: #55c57a;">Welcome <%= username %>!</h3>
            <p>Welcome to your dashboard! Explore the tabs to manage your tasks, view attendance, and update your profile.</p>
        </div><br>
        
<div class="card-container">
    
 <!-- Card 3 -->
 <div class="card">
  <h2>Take Attendance Using NFC</h2>
  <p>Click Here to take Attendance Using NFC Technolgy</p>
  <button onclick="takeAttendance()" class="secondary-button take-attendance-btn report-link" style="display: block;">Take Attendance Using NFC</button>
</div>

 <!-- Card 4 -->
 <div onclick="showAddAttendanceForm()"  class="card">
  <h2>Manually Add Attendance</h2>
  <p>Click Here to Attendance Manually</p>
  <button onclick="showAddAttendanceForm()" class="secondary-button manually-add report-link">Manually Add Attendance</button>
</div>

</div>
        
        <!-- <button onclick="takeAttendance()" class="secondary-button take-attendance-btn" style="display: block;">Take Attendance Using NFC</button> -->
        <!-- <br> -->
        <!-- Add button for manually adding attendance -->
        <!-- <button onclick="showAddAttendanceForm()" class="secondary-button manually-add">Manually Add Attendance</button> -->

        <!-- Add Attendance Form Container (Hidden by default) -->
        <div class="attendance-form-container" id="addAttendanceFormContainer" style="display: none;">
          <div class="attendance-form-header">
            <h2>Add Attendance</h2>
            <button class="close-btn" onclick="closeAddAttendanceForm()">&times;</button> <!-- Close button -->
          </div>
          <form id="attendanceForm" onsubmit="submitAttendance(event)">
            <label for="serialNumber">Roll Number</label>
            <input type="text" id="serialNumber" name="serialNumber" list="rollNumbers" placeholder="Serial No or Roll No" required><br>
            <datalist id="rollNumbers">
                <option value="1">Mathews A George S6 CSE</option>
                <option value="2">Ansu Rose Joseph S6 CSE</option>
                <option value="3">Keshav Umesh S6 CSE</option>
                <option value="4">Neha Sara Cherian S6 CSE</option>
                <option value="5">Adhwaith J S6 CSE</option>
                <option value="6">Sonu Jacob Jose S6 CSE</option>
                <!-- Add more options as needed -->
            </datalist>

            <!-- <label for="logData">Log Data:</label> -->
            <!-- <input type="text" id="logData" name="logData"  value="in"  required><br> -->

            <label for="time">Time:</label>
            <input type="datetime-local" id="time" name="time" required><br>

            <!-- <label for="teacher">Teacher:</label> -->
            <!-- <input type="text" id="teacher" name="teacher"><br> -->

             <!-- Select Period -->
    <label for="period">Period:</label>
    <select id="period" name="period">
      <option value="Period 1">Period 1</option>
      <option value="Period 2">Period 2</option>
      <option value="Period 3">Period 3</option>
      <option value="Period 4">Period 4</option>
      <option value="Period 5">Period 5</option>
      <option value="Period 6">Period 6</option>
    </select><br>

    <label for="subject">Subject:</label>
    <select id="subject" name="subject">
        <!-- Subject options will be dynamically populated here -->
    </select><br>

            <!-- Select collection for adding data -->
            <!-- <label for="collection">Select Teacher</label> -->
            <!-- <select id="collection" name="collection"> -->
              <!-- <option value="jini_records">Jini George</option> -->
              <!-- <option value="anitha_records">Anithia</option> -->
              <!-- <option value="nimitha_records">Nimitha</option> -->
              
            <!-- </select><br> -->
            <!-- Assuming there's a hidden input field in the HTML that stores the username -->
<input type="hidden" id="username" value="<%= username %>">

            <button class="secondary-button-add" type="submit" >Add Attendance</button>
          </form>
        </div>

        
      </div>


<!-- Attendance content -->
<section class="attendance" style="display:none;">
  <!-- Add the refresh icon -->
  <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>

  <div class="attendance-list">
      <h1>Attendance List of Students</h1>
      <br>
      <p>Total Present: <span id="totalPresentCount" class="total-present-count">0</span></p>
      <br>
      <!-- Button to select date -->
      <label for="attendanceDate">Select Date: </label>
      <input type="date" id="attendanceDate">
      <!-- Enhanced select input for subject with modern styling -->
      <div class="select-container">
          <label for="attendanceSubject" class="select-label">Select Subject:</label>
          <select id="attendanceSubject" class="select-styled">
              <option value="">All Subjects</option>
              <% subjects.forEach(subject => { %>
                  <option value="<%= subject %>"><%= subject %></option>
              <% }); %>
          </select>
      </div>

      <!-- Enhanced select input for period with modern styling -->
      <div class="select-container">
          <label for="attendancePeriod" class="select-label">Select Period:</label>
          <select id="attendancePeriod" class="select-styled">
              <option value="">All Periods</option>
              <option value="Period 1">Period 1</option>
              <option value="Period 2">Period 2</option>
              <option value="Period 3">Period 3</option>
              <option value="Period 4">Period 4</option>
              <option value="Period 5">Period 5</option>
              <option value="Period 6">Period 6</option>
              <!-- Add more options for other periods as needed -->
          </select>
      </div>

      <button onclick="displayAttendanceByDateAndSubjectandPeriod()" class="secondary-button">Display Attendance</button>
      <button onclick="exportAttendanceToPDF()" class="secondary-button">Export Table to PDF</button>

      <a href="/generate-excel-report?username=<%= username %>" target="_blank" class="report-link report-excel">Download Excel Report <i class="fas fa-file-excel"></i></a>
      <a href="/generate-pdf-report?username=<%= username %>" target="_blank" class="report-link report-pdf">Download PDF Report <i class="fas fa-file-pdf"></i></a>

      <!-- Search input field -->
      <input type="text" id="searchInput" onkeyup="searchTable()" placeholder="Search for names..">

      <table id="attendanceTable" class="table">
          <thead>
              <tr>
                <th onclick="sortTable(0, this)">Date <i class="fas fa-sort" id="sortIcon0"></i></th>
                <th onclick="sortTable(1, this)">Time <i class="fas fa-sort" id="sortIcon1"></i></th>
                <th onclick="sortTable(2, this)">Student Name <i class="fas fa-sort" id="sortIcon2"></i></th>
                <th onclick="sortTable(3, this)">Subject <i class="fas fa-sort" id="sortIcon3"></i></th>
                <th onclick="sortTable(4, this)">Period <i class="fas fa-sort" id="sortIcon4"></i></th>
                <th>Delete</th>
              </tr>
          </thead>
          <tbody>
              <% attendanceData.forEach(data => { %>
                 <tr data-id="<%= data._id %>">
                      <td><%= data.time.toDateString() %></td>
                      <td><%= data.time.toLocaleTimeString() %></td>
                      <td><%= data.studentName %></td>
                      <td><%= data.subject %></td>
                      <td><%= data.period %></td>
                      <td>
                        <button onclick="deleteAttendance('<%= data._id %>', '<%= username %>')">Delete</button>
                      </td>
                  </tr>
              <% }); %>
          </tbody>
      </table>
  </div>
</section>

    <!-- <section class="report" style="display:none;"> -->
      <!-- Report content -->
      <!-- <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button> -->
      <!-- <div class="report-list"> -->
        <!-- <h1 >Monthly Attendance Report Generation</h1> -->
        <!-- Add your report content here -->
        <!-- <p>This report provides an overview of the monthly attendance records for all students. Here, you can generate reports in Excel and PDF formats according to your needs..</p> -->

      <!-- Card 5 -->
 <!-- <div   class="card"> -->
  <!-- <h2>Generate Execl Report</h2> -->
  <!-- <p>Click Here to Download Execl Report in csv Format </p> -->
  <!-- <a href="/generate-excel-report?username=<%= username %>" target="_blank" class="report-link report-excel">Download Excel Report <i class="fas fa-file-excel"></i></a> -->
<!-- </div> -->

  <!-- Card 5 -->
  <!-- <div   class="card"> -->
    <!-- <h2>Generate PDF Report</h2> -->
    <!-- <p>Click Here to Download PDF Attendance Report </p> -->
    <!-- <a href="/generate-pdf-report?username=<%= username %>" class="report-link report-pdf" target="_blank">Download PDF Report <i class="fas fa-file-pdf"></i></a> -->
  <!-- </div> -->

                     <!-- <div class="report-actions"> -->
                               <!-- <a href="/generate-excel-report?username=<%= username %>" target="_blank" class="report-link report-excel">Download Excel Report <i class="fas fa-file-excel"></i></a> -->
                                <!-- <a href="/generate-pdf-report?username=<%= username %>" class="report-link report-pdf" target="_blank">Download PDF Report <i class="fas fa-file-pdf"></i></a> -->
          
              <!-- </div> -->
      
    <!-- </section> -->

    <section class="students" style="display:none;">
      <!-- Students content -->
      <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>
      <div class="students-content">
          <h1>Total Students</h1>
          <!-- Add select input for class -->
          <label for="attendanceClass">Select Class: </label>
          <select id="attendanceClass">
            <option value="">All Classes</option>
            <% classes.forEach(function(classItem) { %>
                <option value="<%= classItem %>"><%= classItem %></option>
            <% }); %>
          </select>
          <button onclick="displayStudentsByClass()" class="secondary-button">Display Students</button>
          <table id="attendanceTablee" class="table">
            <thead>
              <tr>
                <th>Serial Number</th>
                <th>Student Name</th>
                <th>Class</th>
                <th>Phone Number</th>
              </tr>
            </thead>
            <tbody>
              <% students.forEach(student => { %>
                  <tr>
                      <td><%= student.serialNumber %></td>
                      <td><%= student.student_name %></td>
                      <td><%= student.class %></td>
                      <td><%= student.ph %></td>
                  </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
    </section>

    <section class="messages" style="display:none;">
      <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>
      <!-- <H1>You can send bulk SMS to parents informing them about their child’s performance, attendance, important dates, etc</H1> -->
      <div class="messages-content">
        <h2>Send a Message</h2>
        <form id="messageForm" action="/send-message" method="post" class="message-form" enctype="multipart/form-data">
       <!-- Place this within the message form section -->
<div class="form-group">
  <label for="recipientType">Recipient Type:</label>

  <select name="recipientType" id="recipientType" class="form-control">
      <!-- <option value="individual">Individual</option> -->
      <option value="select">Select</option>
      <option value="parents">Parents (Group MSG)</option>
      <option value="students">Students (Group MSG)</option>
  </select>
</div>

<div class="form-group" id="classSelector" style="display: none;">
  <label for="classSelect">Select Class:</label>
  <select id="classSelect" class="form-control">
      <option value="">Select a Class</option>
      <option value="CSES6">CSE-S6</option>
      <option value="CSES4">CSE-S4</option>
  </select>
</div>

<div id="studentsList" style="display: none;"></div>
<div class="form-group" id="classSelector" style="display: none;">
  <label for="classSelect">Select Class:</label>
  <select id="classSelect" class="form-control">
      <option value="">Select a Class</option>
      <option value="CSES6">CSE-S6</option>
      <option value="CSES4">CSE-S4</option>
  </select>
</div>

          <div class="form-group">
           
            
          </div>
          <div class="form-group">
            <label for="subject">Subject For Email:</label>
            <input type="text" id="subject" name="subject" class="form-control">
          </div>
          <div class="form-group">
            <label for="message">Message Content For Email:</label>
            <textarea id="message" name="message" class="form-control"></textarea>
          </div>

          <div class="form-group">
            <label for="pdfFile">PDF File:</label>
            <input type="file" id="pdfFile" name="pdfFile" accept="application/pdf" class="form-control">
          </div>


          <button type="submit" class="btn-send">Send <i class="fas fa-paper-plane"></i></button>
          <button type="button" onclick="resetForm()" class="btn-reset">Reset Form</button> <!-- Reset button -->
          <div id="loadingIndicator" class="spinner" style="display: none;"></div> 
        </form>
        
         
        <div id="messageStatus"></div> <!-- Placeholder for the status message -->
      </div>
    </section>

    <section class="attendance-percentage" style="display:none;">
      <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>
      
      <div class="attendance-percentage-content">
        <h1>Calculate Attendance Percentage Based on Subject</h1><br>
        
        <label for="subjectInput" class="sub">Select Subject:</label>
        <select id="subjectInput" class="select-styled">
          <option value="">All Subjects</option>
          <% subjects.forEach(subject => { %>
              <option value="<%= subject %>"><%= subject %></option>
          <% }); %>
        </select><br><br>
    
        <label for="totalClassesInput">Total Classes Conducted:</label>
        <input type="number" id="totalClassesInput" name="totalClasses" placeholder="Enter Total Classes Conducted for Above Subject (Total Hours Taken)" required readonly>
        <button onclick="calculateAttendancePercentage()" class="secondary-button">Calculate</button>
        <div id="attendanceLoadingIndicator" class="attendanceSpinner" style="display: none;"></div>
        
        <div id="attendancePercentageResults" style="display: none;">
          <table class="table" id="attendancePercentageTable">
            <button onclick="generateAttendancePercentagePDF()" class="secondary-button">Generate PDF Report</button>
            <button onclick="sendLowAttendanceEmails()" class="secondary-button">Send Low Attendance Emails</button>
            <thead>
              <tr>
                <th>Student Name</th>
                <th>Attendance Percentage</th>
              </tr>
            </thead>
            <tbody>
              <!-- Data will be inserted here dynamically -->
            </tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- Add the spinner element -->
<div id="emailLoadingSpinner" style="display: none;">
  <div class="spinnerr"></div>
</div>


  <section class="announcements" style="display:none;">
  <div class="announcements-container">
    <div class="announcement-header">
      <h1>Latest Announcements</h1>
    </div>
    <div id="lowAttendanceSection" class="low-attendance-container">
      <h2 class="section-title">Students with Low Attendance</h2>
      <div id="lowAttendanceList" class="low-attendance-list">
          <!-- Subjects and students will be dynamically inserted here -->
      </div>
    </div>
  </div>
</section>

    <section class="profile" style="display:none;">
      <button onclick="refreshPage()" class="refresh-btn"><i class="fas fa-sync-alt"></i> Refresh</button>
      <div class="profile-content">
        <h1>Profile Information</h1>
        <div class="profile-card">
            <i class="fas fa-user"></i>
            <p>Username: <%= username %></p>
        </div>
        <div class="profile-card">
            <i class="fas fa-envelope"></i>
            <p>Email: mathewsgeorge202@gmail.com</p>
        </div>
              <!-- Form to increment class count with modern styling -->
<div class="increment-class-form">
  <h2>Set Class Count</h2>
  <form action="/set-class-count" method="post" onsubmit="return false;">
      <input type="hidden" name="username" value="<%= username %>">
      <label for="subject">Select Subject:</label>
      <select name="subject" id="subject">
          <% subjects.forEach(subject => { %>
              <option value="<%= subject %>"><%= subject %></option>
          <% }); %>
      </select>
      <label for="newCount">New Class Count:</label>
      <input type="number" id="newCount" name="newCount" min="0" required>
      <button type="submit">Update Count</button>
  </form>
</div>
    </div>
    </section>
  </section>

</div>

<!-- Overlay -->
<div class="overlay"></div>

<!-- The Modal -->
<div id="myModal" class="modal">
  <!-- Modal content -->
  <div class="modal-content">
    <span class="close">&times;</span>
    <p id="modalMessage">Message sent successfully</p>
  </div>
</div>
 

  <script>

function resetForm() {
    // Reset the form fields to their default values
    document.getElementById('messageForm').reset();

    // Clear the dynamically added student list
    const studentsList = document.getElementById('studentsList');
    if (studentsList) {
        studentsList.innerHTML = '';
    }

    // Optionally, hide the class selector if it should not be visible initially
    const classSelector = document.getElementById('classSelector');
    if (classSelector) {
        classSelector.style.display = 'none';
    }
}


document.addEventListener('DOMContentLoaded', function() {
    const recipientTypeSelect = document.getElementById('recipientType');
    const classSelector = document.getElementById('classSelector');
    const studentsList = document.getElementById('studentsList');

    recipientTypeSelect.addEventListener('change', function() {
        const showClassSelector = this.value === 'parents' || this.value === 'students';
        classSelector.style.display = showClassSelector ? 'block' : 'none';
        studentsList.innerHTML = ''; // Clear the list
        studentsList.style.display = 'none';
    });

    document.getElementById('classSelect').addEventListener('change', function() {
        const recipientType = recipientTypeSelect.value;
        const emailType = recipientType === 'parents' ? 'parentEmail' : 'studentEmail';

        if (this.value) {
            fetch(`/get-students-by-class?classId=${this.value}`)
            .then(response => response.json())
            .then(data => {
                studentsList.style.display = 'block';
                studentsList.innerHTML = ''; // Clear previous entries
                data.forEach(student => {
                    studentsList.innerHTML += `
                        <label>
                            <input type="checkbox" name="studentEmails" value="${student[emailType]}"> ${student.studentName} (${student.class})
                        </label><br>
                    `;
                });
            });
        } else {
            studentsList.innerHTML = ''; // Clear the list if no class is selected
            studentsList.style.display = 'none';
        }
    });
});



document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.increment-class-form form');
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // This prevents the default form submission

        const formData = new FormData(form);
        fetch('/set-class-count', {
            method: 'POST',
            body: new URLSearchParams(formData) // Ensure proper encoding of form data
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message); // Display an alert with the response message
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update class count');
        });
    });
});


document.addEventListener('DOMContentLoaded', function() {
    var modal = document.getElementById("myModal");
    var span = document.getElementsByClassName("close")[0];

    document.getElementById('messageForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission

    // Show the spinner
    document.getElementById('loadingIndicator').style.display = 'block';

    const formData = new FormData(this);
    fetch('/send-message', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.text())
    .then(data => {
        document.getElementById("modalMessage").innerText = data; // Set the message
        modal.style.display = "block"; // Show the modal
        document.getElementById('loadingIndicator').style.display = 'none'; // Hide the spinner
    })
    .catch(error => {
        console.error('Error:', error);
        document.getElementById("modalMessage").innerText = 'Error sending message';
        modal.style.display = "block"; // Show the modal
        document.getElementById('loadingIndicator').style.display = 'none'; // Hide the spinner
    });
});

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
});

     // Add this inside the <script> tag
document.getElementById('profile-icon').addEventListener('click', function(event) {
    event.preventDefault();
    // Update heading
    document.querySelector('.main-top h1').innerText = 'Profile';
    // Hide all sections
    hideAllSections();
    // Show profile section
    document.querySelector('.profile').style.display = 'block';
});

    
   // JavaScript code to handle navigation link clicks
  document.getElementById('dashboard-link').addEventListener('click', function(event) {
    event.preventDefault();
    // Update heading
    document.querySelector('.main-top h1').innerText = 'Welcome to NFCAMS Teacher Dashboard';
    // Hide all sections
    hideAllSections();
    // Show welcome section
    document.getElementById('welcome').style.display = 'block';
    document.querySelector('.welcome-message').style.display = 'block';
    document.querySelector('.take-attendance-btn').style.display = 'block';
  });

  // document.getElementById('report-link').addEventListener('click', function(event) {
    // event.preventDefault();
    // Update heading
    // document.querySelector('.main-top h1').innerText = 'Report';
    // Hide all sections
    // hideAllSections();
    // Show report section
    // document.querySelector('.report').style.display = 'block';
  // });

  document.getElementById('attendance-link').addEventListener('click', function(event) {
    event.preventDefault();
    // Update heading
    document.querySelector('.main-top h1').innerText = 'View Attendance List & Report Generation';
    // Hide all sections
    hideAllSections();
    // Show attendance section
    document.querySelector('.attendance').style.display = 'block';
  });

  document.getElementById('students-link').addEventListener('click', function(event) {
    event.preventDefault();
    // Update heading
    document.querySelector('.main-top h1').innerText = 'List of All Students';
    // Hide all sections
    hideAllSections();
    // Show students section
    document.querySelector('.students').style.display = 'block';
  });


// Update the event listener for the profile-link
document.getElementById('profile-link').addEventListener('click', function(event) {
  event.preventDefault();
  document.querySelector('.main-top h1').innerText = 'Settings';
  hideAllSections();
  document.querySelector('.profile').style.display = 'block'; // Updated class reference
});

document.getElementById('attendance-percentage-link').addEventListener('click', function(event) {
  event.preventDefault();
  document.querySelector('.main-top h1').innerText = 'Attendance Percentage Calculation';
  hideAllSections();
  document.querySelector('.attendance-percentage').style.display = 'block';
});

document.getElementById('message-link').addEventListener('click', function(event) {
  event.preventDefault();
  document.querySelector('.main-top h1').innerText = 'Messages';
  hideAllSections();
  document.querySelector('.messages').style.display = 'block';
});

document.getElementById('announcements-link').addEventListener('click', function(event) {
  event.preventDefault();
  document.querySelector('.main-top h1').innerText = 'Announcements';
  hideAllSections();
  document.querySelector('.announcements').style.display = 'block';
});


 // Update the hideAllSections function
function hideAllSections() {
  document.getElementById('welcome').style.display = 'none';
  document.querySelector('.welcome-message').style.display = 'none';
  document.querySelector('.take-attendance-btn').style.display = 'none';
  // document.querySelector('.report').style.display = 'none';
  document.querySelector('.attendance').style.display = 'none';
  document.querySelector('.students').style.display = 'none';
  document.querySelector('.profile').style.display = 'none'; // Updated class reference
  document.querySelector('.attendance-percentage').style.display = 'none';
  document.querySelector('.messages').style.display = 'none';
  document.querySelector('.announcements').style.display = 'none';
}


document.addEventListener('DOMContentLoaded', function() {
    const subjectInput = document.getElementById('subjectInput');
    const totalClassesInput = document.getElementById('totalClassesInput');

    // Event listener for subject input changes
    subjectInput.addEventListener('change', function() {
        const subject = subjectInput.value.toUpperCase(); // Convert to uppercase

        // Fetch total classes for the entered subject
        fetch(`/get-total-classes?subject=${subject}`)
        .then(response => response.json())
        .then(data => {
            if (data.totalClasses) {
                totalClassesInput.value = data.totalClasses; // Set the total classes input field
            } else {
                alert('Total classes data not found for the entered subject.');
                totalClassesInput.value = ''; // Clear the field if no data found
            }
        })
        .catch(error => {
            console.error('Error fetching total classes:', error);
            alert('Failed to fetch total classes.');
        });
    });
});



function calculateAttendancePercentage() {
    // Show the spinner
    document.getElementById('attendanceLoadingIndicator').style.display = 'block';

    const subjectInput = document.getElementById('subjectInput');
    let subject = subjectInput.value.toUpperCase(); // Convert to uppercase
    const username = '<%= username %>';

    // Fetch total classes first
    fetch(`/get-total-classes?subject=${subject}&username=${username}`)
    .then(response => response.json())
    .then(data => {
        if (data.totalClasses) {
            const totalClasses = data.totalClasses;

            // Now fetch attendance percentage
            fetch('/calculate-attendance-percentage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ subject, totalClasses, username })
            })
            .then(response => response.json())
            .then(data => {
                const tbody = document.querySelector('#attendancePercentageTable tbody');
                tbody.innerHTML = ''; // Clear existing rows
                data.forEach(item => {
                    const row = `<tr><td>${item.studentName}</td><td>${item.percentage}%</td></tr>`;
                    tbody.innerHTML += row;
                });
                document.getElementById('attendancePercentageResults').style.display = 'block';
                // Hide the spinner
                document.getElementById('attendanceLoadingIndicator').style.display = 'none';
            })
            .catch(error => {
                console.error('Error:', error);
                // Hide the spinner
                document.getElementById('attendanceLoadingIndicator').style.display = 'none';
            });
        } else {
            console.error('Total classes data not found');
            // Hide the spinner
            document.getElementById('attendanceLoadingIndicator').style.display = 'none';
        }
    })
    .catch(error => {
        console.error('Error fetching total classes:', error);
        // Hide the spinner
        document.getElementById('attendanceLoadingIndicator').style.display = 'none';
    });
}


function generateAttendancePercentagePDF() {
    const subject = document.getElementById('subjectInput').value;
    const totalClasses = document.getElementById('totalClassesInput').value;
    const username = '<%= username %>'; // Assuming username is available in your EJS template

    // Open the server route that generates the PDF in a new tab
    window.open(`/generate-attendance-percentage-pdf?subject=${subject}&totalClasses=${totalClasses}&username=${username}`, '_blank');
}


  function displayStudentsByClass() {
    var selectedClass = document.getElementById("attendanceClass").value;
    var rows = document.getElementById("attendanceTablee").rows;

    for (var i = 1; i < rows.length; i++) {
        var classCell = rows[i].getElementsByTagName("td")[2].innerText;

        if (selectedClass === "" || classCell === selectedClass) {
            rows[i].style.display = "";
        } else {
            rows[i].style.display = "none";
        }
    }
}


  function takeAttendance() {
    // Open the specified URL in a new tab
    window.open("https://nfcams.vercel.app/", "_blank");
}


function displayAttendanceByDateAndSubjectandPeriod() {
    var selectedDate = new Date(document.getElementById("attendanceDate").value);
    var selectedSubject = document.getElementById("attendanceSubject").value;
    var selectedPeriod = document.getElementById("attendancePeriod").value; // Get the selected period
    var totalPresent = 0;

    var rows = document.getElementById("attendanceTable").rows;

    for (var i = 1; i < rows.length; i++) {
        var dateCell = new Date(rows[i].getElementsByTagName("td")[0].innerText);
        var subjectCell = rows[i].getElementsByTagName("td")[3].innerText;
        var periodCell = rows[i].getElementsByTagName("td")[4].innerText; // Get the period cell value

        var dateMatches = dateCell.toDateString() === selectedDate.toDateString();
        var subjectMatches = selectedSubject === "" || subjectCell === selectedSubject;
        var periodMatches = selectedPeriod === "" || periodCell === selectedPeriod; // Check if the period matches

        if (dateMatches && subjectMatches && periodMatches) {
            rows[i].style.display = "";
            totalPresent++;
        } else {
            rows[i].style.display = "none";
        }
    }

    // Display total count
    document.getElementById("totalPresentCount").innerText = totalPresent;
}



function logout() {
      // Redirect to the login page or any other action you want to perform on logout
      localStorage.clear();
      window.location.href = "/"; // Assuming your login page is served at the root URL
    }




 // Function to show the add attendance form
 function showAddAttendanceForm() {
        // Show overlay
        document.querySelector('.overlay').style.display = 'block';
        // Show the form container
        document.querySelector('.attendance-form-container').style.display = 'block';
    }

    // Function to close the add attendance form
    function closeAddAttendanceForm() {
        // Hide overlay
        document.querySelector('.overlay').style.display = 'none';
        // Hide the form container
        document.querySelector('.attendance-form-container').style.display = 'none';
    }

// Mapping of serial numbers to specific values
const serialNumberMap = {
    '1': '05:39:ea:cc:f7:b0:c1',
    '2': '05:33:96:60:06:b0:c1',
    '3': '05:36:41:dc:f7:b0:c1',
    '4': '05:35:84:cc:f7:b0:c1',
    "5": "05:34:6a:64:26:b0:c1",
    "6": "05:39:01:60:06:b0:c1"
    // Add more mappings as needed
};

function submitAttendance(event) {
    event.preventDefault();

    // Get form data
    const formData = new FormData(document.getElementById('attendanceForm'));

    // Convert form data to JSON object
    const jsonData = {};
    formData.forEach((value, key) => {
        // Map serial numbers to specific values before adding to jsonData
        if (key === 'serialNumber' && serialNumberMap[value]) {
            jsonData[key] = serialNumberMap[value];
        } else {
            jsonData[key] = value;
        }
    });

    // Include the username in jsonData
    jsonData['username'] = document.getElementById('username').value; // Assuming the username is stored in an input or a variable

    // Send form data to server
    fetch('/add-attendance', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
    })
    .then(response => {
        if (response.ok) {
            alert('Attendance added successfully');
            // Reset the form after successful submission
            document.getElementById('attendanceForm').reset();
            // Hide the form
            closeAddAttendanceForm();
            refreshPage();
        } else {
            throw new Error('Failed to add attendance');
        }
    })
    .catch(error => {
        console.error('Error adding attendance:', error);
        alert('Failed to add attendance');
    });
}

    // Function to set the active tab in local storage
function setActiveTab(tabId) {
    localStorage.setItem('activeTab', tabId);
}

// Function to get the active tab from local storage
function getActiveTab() {
    return localStorage.getItem('activeTab');
}

// Function to switch to the active tab
function switchToActiveTab() {
    const activeTabId = getActiveTab();
    if (activeTabId) {
        const activeTab = document.getElementById(activeTabId);
        if (activeTab) {
            activeTab.click(); // Trigger click event to switch to the active tab
        }
    }
}

// Add event listeners to set the active tab when a navigation link is clicked
document.querySelectorAll('.nav-itemm').forEach(item => {
    item.addEventListener('click', function() {
        setActiveTab(this.id); // Set the active tab to the clicked link's id
    });
});

// Call switchToActiveTab when the DOM content is loaded
document.addEventListener('DOMContentLoaded', switchToActiveTab);

function refreshPage() {
    location.reload();
}



function deleteAttendance(id, username) {
    // Confirmation dialog
    const isConfirmed = confirm('Are you sure you want to delete this data?');
    
    // Check if the user confirmed the deletion
    if (isConfirmed) {
        // Proceed with the deletion
        fetch('/delete-attendance', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id: id, username: username }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Record deleted successfully', 'success');
                // Optionally, refresh the page or remove the row from the table
            } else {
                showNotification('Failed to delete record', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Failed to delete record', 'error');
        });
    } else {
        // If the user clicked Cancel, do nothing
        console.log('Deletion cancelled by user.');
    }
}

function showNotification(message, type) {
    const notification = document.getElementById('notification');
    const notificationMessage = document.getElementById('notification-message');
    notificationMessage.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.add('show');
    notification.classList.remove('hide');

    setTimeout(() => {
        notification.classList.add('hide');
        notification.classList.remove('show');
    }, 3000); // Show for 3 seconds
}

function closeNotification() {
    const notification = document.getElementById('notification');
    notification.classList.add('hide');
    notification.classList.remove('show');
}



document.addEventListener('DOMContentLoaded', function() {
    var recipientTypeDropdown = document.getElementById('recipientType');
    var emailLabel = document.querySelector('label[for="email"]');
    var emailInput = document.getElementById('email');

    recipientTypeDropdown.addEventListener('change', function() {
        if (recipientTypeDropdown.value === 'parents' || recipientTypeDropdown.value === 'students') {
            emailLabel.style.display = 'none'; // Hide the Email label
            emailInput.style.display = 'none'; // Hide the Email input
        } else {
            emailLabel.style.display = 'block'; // Show the Email label for individual recipients
            emailInput.style.display = 'block'; // Show the Email input for individual recipients
        }
    });
});



function collectTableData() {
    const rows = document.querySelectorAll("#attendanceTable tbody tr");
    const visibleData = Array.from(rows).filter(row => row.style.display !== "none").map(row => {
        const columns = row.querySelectorAll("td");
        return {
            date: columns[0].innerText,
            time: columns[1].innerText,
            studentName: columns[2].innerText,
            subject: columns[3].innerText,
            period: columns[4].innerText
        };
    });
    return visibleData;
}

function exportAttendanceToPDF() {
    const attendanceData = collectTableData();
    if (attendanceData.length === 0) {
        alert("No data available to export.");
        return;
    }

    fetch('/export-attendance-to-pdf', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ attendanceData })
    })
    .then(response => response.blob())
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        window.open(url, '_blank'); // Opens the PDF in a new tab
        // window.URL.revokeObjectURL(url); // Optional: Clean up the object URL after opening
    })
    .catch(error => console.error('Error exporting PDF:', error));
}

document.addEventListener('DOMContentLoaded', function() {
    fetchLowAttendanceStudents();
});

function fetchLowAttendanceStudents() {
    const username = '<%= username %>';
    fetch(`/students-low-attendance?username=${username}`)
    .then(response => response.json())
    .then(data => {
        const lowAttendanceList = document.getElementById('lowAttendanceList');
        lowAttendanceList.innerHTML = ''; // Clear existing entries

        let subjects = {};
        // Group students by subject
        data.forEach(item => {
            if (!subjects[item.subject]) {
                subjects[item.subject] = [];
            }
            subjects[item.subject].push(item);
        });

        // Create entries for each subject
        for (let subject in subjects) {
            let subjectContainer = document.createElement('div');
            subjectContainer.className = 'subject-container';
            let subjectTitle = document.createElement('h4');
            subjectTitle.className = 'subject-title';
            subjectTitle.textContent = subject;
            subjectContainer.appendChild(subjectTitle);

            subjects[subject].forEach(student => {
                let studentEntry = document.createElement('div');
                studentEntry.className = 'student-entry';
                studentEntry.innerHTML = `<strong>${student.studentName}</strong> - ${student.percentage}%`;
                subjectContainer.appendChild(studentEntry);
            });

            lowAttendanceList.appendChild(subjectContainer);
        }
    })
    .catch(error => {
        console.error('Error fetching low attendance students:', error);
    });
}




<!-- Add this script section at the end of your dashboard.ejs file -->

// Define the subjects for each teacher
const teacherSubjects = {
    'Jini_George': ['CGIPS6','DESIGNS4'],
    'Anitha': ['AADS6', 'OSS4'],
    'Nimitha': ['IEFTS6','COAS4']
};

// Function to populate the subject dropdown based on the logged-in teacher's username
function populateSubjectsForTeacher(username) {
    const subjectDropdown = document.getElementById('subject');
    subjectDropdown.innerHTML = ''; // Clear existing options

    const subjects = teacherSubjects[username] || []; // Get subjects based on username

    subjects.forEach(subject => {
        const option = document.createElement('option');
        option.value = subject;
        option.textContent = subject;
        subjectDropdown.appendChild(option);
    });
}

// Call populateSubjectsForTeacher with the logged-in teacher's username
const loggedInUsername = '<%= username %>'; // Assuming the username is available in your EJS template
populateSubjectsForTeacher(loggedInUsername);

const socket = io(); // Connect to the WebSocket server

// Join the room for the current user
socket.emit('join', '<%= username %>');

socket.on('attendanceAdded', function(attendance) {
    const table = document.getElementById('attendanceTable');
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${new Date(attendance.time).toDateString()}</td>
        <td>${new Date(attendance.time).toLocaleTimeString()}</td>
        <td>${attendance.studentName}</td>
        <td>${attendance.subject}</td>
        <td>${attendance.period}</td>
        <td><button onclick="deleteAttendance('${attendance._id}', '<%= username %>')">Delete</button></td>
    `;
    table.appendChild(row);
});

socket.on('attendanceDeleted', function(id) {
    const row = document.querySelector(`tr[data-id="${id}"]`);
    if (row) {
        row.remove();
    }
});



function sendLowAttendanceEmails() {
    const rows = document.querySelectorAll("#attendancePercentageTable tbody tr");
    const lowAttendanceStudents = Array.from(rows).map(row => {
      const columns = row.querySelectorAll("td");
      return {
        studentName: columns[0].innerText,
        percentage: parseFloat(columns[1].innerText)
      };
    });

    const totalClasses = parseInt(document.getElementById('totalClassesInput').value);
    const subject = document.getElementById('subjectInput').value;

    // Filter students with attendance below 75%
    const studentsBelow75 = lowAttendanceStudents.filter(student => student.percentage < 75);

    if (studentsBelow75.length === 0) {
      showNotification('No students in the list have attendance below 75%.');
      return;
    }

    // Ask user for confirmation before sending emails
    const isConfirmed = confirm('Are you sure you want to send emails to students with low attendance?');
    if (!isConfirmed) {
      return; // Stop the function if user cancels
    }

    // Show the loading spinner
    document.getElementById('emailLoadingSpinner').style.display = 'block';

    fetch('/send-low-attendance-emails', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ lowAttendanceStudents: studentsBelow75, totalClasses, subject })
    })
    .then(response => response.json())
    .then(data => {
      // Hide the loading spinner
      document.getElementById('emailLoadingSpinner').style.display = 'none';

      if (data.success) {
        showNotification('Emails sent successfully');
      } else {
        showNotification('Failed to send emails');
      }
    })
    .catch(error => {
      // Hide the loading spinner
      document.getElementById('emailLoadingSpinner').style.display = 'none';

      console.error('Error sending emails:', error);
      alert('Failed to send emails');
    });
  }

  function searchTable() {
        // Declare variables
        var input, filter, table, tr, td, i, j, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("attendanceTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 1; i < tr.length; i++) { // Start from 1 to skip the header row
            tr[i].style.display = "none"; // Hide the row initially
            td = tr[i].getElementsByTagName("td");
            for (j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = ""; // Show the row if a match is found
                        break; // Exit the loop once a match is found
                    }
                }
            }
        }
    }

    function sortTable(columnIndex, headerElement) {
    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    table = document.getElementById("attendanceTable");
    switching = true;
    // Set the sorting direction to ascending:
    dir = "asc";
    // Make a loop that will continue until no switching has been done:
    while (switching) {
        switching = false;
        rows = table.rows;
        for (i = 1; i < (rows.length - 1); i++) {
            shouldSwitch = false;
            x = rows[i].getElementsByTagName("TD")[columnIndex];
            y = rows[i + 1].getElementsByTagName("TD")[columnIndex];
            if (dir == "asc") {
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                }
            } else if (dir == "desc") {
                if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                }
            }
        }
        if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            switchcount++;
        } else {
            if (switchcount == 0 && dir == "asc") {
                dir = "desc";
                switching = true;
            }
        }
    }
    // Update the icon classes
    updateSortIcons(columnIndex, dir);
}

function updateSortIcons(columnIndex, dir) {
    var icons = document.querySelectorAll('.fa-sort, .fa-sort-up, .fa-sort-down');
    icons.forEach(function(icon, index) {
        icon.className = 'fas fa-sort'; // Reset all icons to default
    });
    var activeIcon = document.getElementById('sortIcon' + columnIndex);
    if (dir === 'asc') {
        activeIcon.className = 'fas fa-sort-up';
    } else {
        activeIcon.className = 'fas fa-sort-down';
    }
}


  </script>
</body>
</html>